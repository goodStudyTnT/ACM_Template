 append() 
string &append(const string &s,int pos,int n);//把字符串s中从pos开始的n个字符连接到当前字符串的结尾
或a.append(b);
具体内容
总的来说，
1）运算符：rope支持operator += -= + - < ==
2）输入输出：可以用<<运算符由输入输出流读入或输出。
3）长度/大小：调用length()，size()都可以哦
4）插入/添加等：
push_back(x);//在末尾添加x
insert(pos,x);//在pos插入x，自然支持整个char数组的一次插入
erase(pos,x);//从pos开始删除x个
copy(pos,len,x);//从pos开始到pos+len为止用x代替
replace(pos,x);//从pos开始换成x
substr(pos,x);//提取pos开始x个
at(x)/[x];//访问第x个元素
例子:展开一个括号压缩的字符串，比如z(rz)3r(rul)2cumt 展开为zrzrzrzrrulrulcumt
#include<bits/stdc++.h>
#include<ext/rope>
using namespace __gnu_cxx;
using namespace std;
typedef long long ll;
rope<char> tillRight(char *str,int &p,int &times)
{
    rope<char>ans="";times=0;
    while(str[p]!=')')ans+=str[p++];
    p++;
    while(isdigit(str[p]))
        times=times*10+(str[p++]-'0');
    p--;
    return ans;
}
rope<char>times(rope<char> &src,int times)
{
    rope<char>ans,tmp=src;
    while(times)
    {
        if(times&1)ans+=tmp;
            times>>=1;tmp+=tmp;
    }
    return ans;
}
void expand(char *str,rope<char>&ss)
{
    int p=0;ss.clear();
    for(;str[p];p++)
    {
        if(str[p]!='(')ss+=str[p];
        else
        {
            p++;
            int t;
            crope tmp=tillRight(str,p,t);
            ss.append(times(tmp,t));
        }
    }
}
char str[20005];

int main()
{
    while(~scanf("%s",str))
    {
        rope<char>txt;
        expand(str,txt);
        printf("%s\n",txt.c_str());
    }
    return 0;
}
例2: 
题意
设计支持如下 3 种操作： 
1.T x：在文章末尾打下一个小写字母 x。(type 操作) 
2.U x：撤销最后的x 次修改操作。（Undo 操作） 
（注意Query 操作并不算修改操作） 
3.Q x：询问当前文章中第x 个字母并输出。（Query 操作）
操作数n<=100000 在线算法
    #include<cstdio>  
    #include<cstring>  
    #include<cctype>  
    #include<iostream>  
    #include<algorithm>  
    #include<ext/rope>  
    using namespace std;  
    using namespace __gnu_cxx;  
    const int maxn=1e5+10;  
    rope<char> *his[maxn];  
    int n;  
    int d[maxn];  
    inline int lowbit(int x){  
        return x&-x;  
    }  
    inline void updata(int x){  
        while(x<=n){  
            d[x]++;  
            x+=lowbit(x);  
        }  
    }  
    inline int get(int x){  
        int res=0;  
        while(x){  
            res+=d[x];  
            x-=lowbit(x);  
        }return res;  
    }  
    inline char getC(){  
        char ch=getchar();  
        while(!isalpha(ch))ch=getchar();  
        return ch;  
    }  
    inline int getint(){  
        int res=0;  
        char ch,ok=0;  
        while(ch=getchar()){  
            if(isdigit(ch)){  
                res*=10;res+=ch-'0';ok=1;  
            }else if(ok)break;  
        }return res;  
    }  
    void deb(rope<char> s){  
        for(int i=0;i<s.length();i++)  
        cout<<s[i];puts("");  
    }  
    int main(){  
        freopen("type.in","r",stdin);  
        freopen("type.out","w",stdout);  
        n=getint();  
        his[0]=new rope<char>();  
        for(int i=1;i<=n;i++){  
            his[i]=new rope<char>(*his[i-1]);  //可持久化
    //      deb(*his[i]);  
            char opt=getC();  
            if(opt=='T'){  
                char x=getC();  
                his[i]->push_back(x);  
                updata(i);  
            }else  
            if(opt=='U'){  
                updata(i);  
                int x=getint();  
                int l=1,r=i,mid,now=get(i);  
                while(l<r){  
                    mid=(l+r)>>1;  
                    if(now-get(mid)>x)  
                        l=mid+1;  
                    else  
                        r=mid;  
                }  
                his[i]=his[l-1];  
                  
            }else  
            if(opt=='Q'){  
                int x=getint()-1;  
                putchar(his[i]->at(x));  
                putchar('\n');    
            }  
    //      deb(*his[i]);  
        }  
        return 0;  
}  
